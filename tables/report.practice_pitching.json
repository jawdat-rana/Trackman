{
    "query": {
        "L": [
            {
                "M": {
                    "from": {
                        "S": "practice.plays left join practice.games on plays.game_id = games.id"
                    },
                    "select": {
                        "S": "measurementid, mps_to_mph(measurement_pitch_release_speed) as Velo, m_to_in(measurement_pitch_trajectory_horizontalbreak) HorizBreak, m_to_in(measurement_pitch_trajectory_inducedverticalbreak) VertBreak, m_to_ft(measurement_pitch_location_height) LocationHeight, m_to_ft(measurement_pitch_location_side) LocationSide, m_to_ft(measurement_pitch_release_height) RelHeight, m_to_ft(measurement_pitch_release_side) RelSide, measurement_pitch_release_spinaxis SpinAxis, measurement_pitch_release_spinrate * 60 SpinRate, measurement_pitch_release_speed as Velo_Metric, measurement_pitch_trajectory_horizontalbreak as HorizBreak_Metric, measurement_pitch_trajectory_inducedverticalbreak as VertBreak_Metric, measurement_pitch_location_height as LocationHeight_Metric, measurement_pitch_location_side as LocationSide_Metric, measurement_pitch_release_height as RelHeight_Metric, measurement_pitch_release_side as RelSide_Metric, result_pitchtype, result_pitcher_id, result_pitcher_lastname, result_pitcher_firstname, plays.locationid, games.organization_name, cast(games.local_time as datetime) as session_time, measurement_pitch_release_spinaxis Tilt, plays.local_time as pitch_time, games.id as session_id, games.organization_id as org_id, games.date_processed as upload_time, plays.result_flag, plays.result_pitcherset, plays.iswarmup, getdate() as date_processed"
                    }
                }
            }
        ]
    },
    "schema": {
        "S": "report"
    },
    "table": {
        "S": "practice_pitching"
    }
}